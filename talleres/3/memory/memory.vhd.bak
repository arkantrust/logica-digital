library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity memory is
    Port ( 
        clk    : in  STD_LOGIC;
        reset  : in  STD_LOGIC;
        ready  : in  STD_LOGIC;
        r_w    : in  STD_LOGIC;  -- '0' para escritura, '1' para lectura
        oe     : out STD_LOGIC;  -- output enable
        we     : out STD_LOGIC   -- write enable
    );
end memory;

architecture Behavioral of memory is
    -- Definición de estados
    type state_type is (IDLE, START, WRITING, READING);
    signal current_state, next_state : state_type;

begin
    -- Proceso de registro de estado
    SYNC_PROC: process(clk, reset)
    begin
        if reset = '1' then
            current_state <= IDLE;
        elsif rising_edge(clk) then
            current_state <= next_state;
        end if;
    end process;

    -- Proceso combinacional para siguiente estado y salidas
    NEXT_STATE_DECODE: process(current_state, ready, r_w)
    begin
        -- Valores por defecto de las salidas
        oe <= '0';
        we <= '0';
        
        -- Lógica de siguiente estado y salidas
        case current_state is
            when IDLE =>
                if ready = '1' then
                    next_state <= START;
                else
                    next_state <= IDLE;
                end if;

            when START =>
                if ready = '1' then
                    if r_w = '0' then
                        next_state <= WRITING;
                    else
                        next_state <= READING;
                    end if;
                else
                    next_state <= START;
                end if;

            when WRITING =>
                we <= '1';  -- Activar write enable
                if ready = '1' then
                    next_state <= IDLE;
                else
                    next_state <= WRITING;
                end if;

            when READING =>
                oe <= '1';  -- Activar output enable
                if ready = '1' then
                    next_state <= IDLE;
                else
                    next_state <= READING;
                end if;

            when others =>
                next_state <= IDLE;
        end case;
    end process;

end Behavioral;